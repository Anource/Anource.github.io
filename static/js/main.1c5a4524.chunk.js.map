{"version":3,"sources":["App.js","index.js"],"names":["App","props","parseQueryString","string","slice","split","map","queryParam","kvp","key","value","reduce","query","queryParams","this","window","location","search","hashParams","hash","activePanel","id","title","Object","keys","description","style","color","React","Component","bridge","subscribe","detail","type","data","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","status_bar_color","send","ReactDOM","render","getElementById"],"mappings":"2hBAyDeA,G,gEAhDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAIbC,iBAAmB,SAACC,GACnB,OAAOA,EAAOC,MAAM,GAAGC,MAAM,KAC5BC,KAAI,SAACC,GACL,IAAIC,EAAMD,EAAWF,MAAM,KAC3B,MAAO,CAACI,IAAKD,EAAI,GAAIE,MAAOF,EAAI,OAEhCG,QAAO,SAACC,EAAOJ,GAEf,OADAI,EAAMJ,EAAIC,KAAOD,EAAIE,MACdE,IACL,KAdkB,E,qDAmBf,IAAMC,EAAcC,KAAKZ,iBAAiBa,OAAOC,SAASC,QACpDC,EAAaJ,KAAKZ,iBAAiBa,OAAOC,SAASG,MAEzD,OACI,kBAAC,IAAD,CAAMC,YAAY,QACd,kBAAC,IAAD,CAAOC,GAAG,QACN,kBAAC,IAAD,sBACA,kBAAC,IAAD,CAAOC,MAAM,gBACT,kBAAC,IAAD,KACKC,OAAOC,KAAKX,GAAaP,KAAI,SAACG,GAC3B,IAAIC,EAAQG,EAAYJ,GACxB,OAAO,kBAAC,IAAD,CAAMgB,YAAahB,GAAMC,GAAgB,0BAAMgB,MAAO,CAACC,MAAO,QAArB,WAK5D,kBAAC,IAAD,CAAOL,MAAM,eACT,kBAAC,IAAD,KACKC,OAAOC,KAAKN,GAAYZ,KAAI,SAACG,GAC1B,IAAIC,EAAQQ,EAAWT,GACvB,OAAO,kBAAC,IAAD,CAAMgB,YAAahB,GAAMC,GAAgB,0BAAMgB,MAAO,CAACC,MAAO,QAArB,iB,GAxC9DC,IAAMC,YCAxBC,IAAOC,WAAU,YAAgC,IAAD,IAA5BC,OAAUC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,KACnC,GAAa,yBAATD,EAAiC,CACpC,IAAME,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBzB,MAAQwB,EAAKI,OAASJ,EAAKI,OAAS,eACpDF,SAASG,KAAKC,WAAWC,aAAaN,GAChC,IAAIO,EAAmB,OACM,cAAzBP,EAAgBzB,QAAuBgC,EAAmB,SAC9DZ,IAAOa,KAAK,0BAA2B,CAAC,iBAAoBD,QAIpEZ,IAAOa,KAAK,gBAEZC,IAASC,OAAO,kBAAC,EAAD,MAAST,SAASU,eAAe,W","file":"static/js/main.1c5a4524.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\n//import View from '@vkontakte/vkui/dist/components/View/View';\nimport { View, Panel, PanelHeader, Header, Group, Cell, List, Root } from '@vkontakte/vkui';\nimport { Input, Div, Button, Alert, Text, Headline } from '@vkontakte/vkui';\nimport Icon28MessageOutline from '@vkontakte/icons/dist/28/message_outline';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        \n    }\n\t\n\tparseQueryString = (string) => {\n\t\treturn string.slice(1).split('&')\n\t\t.map((queryParam) => {\n\t\t\tlet kvp = queryParam.split('=');\n\t\t\treturn {key: kvp[0], value: kvp[1]}\n\t\t})\n\t\t.reduce((query, kvp) => {\n\t\t\tquery[kvp.key] = kvp.value;\n\t\t\treturn query\n\t\t}, {})\n    };\n    \n    \n    render() {\n        const queryParams = this.parseQueryString(window.location.search);\n        const hashParams = this.parseQueryString(window.location.hash);\n\n        return (\n            <View activePanel=\"main\">\n                <Panel id=\"main\">\n                    <PanelHeader>Launch params</PanelHeader>\n                    <Group title=\"Query params\">\n                        <List>\n                            {Object.keys(queryParams).map((key) => {\n                                let value = queryParams[key];\n                                return <Cell description={key}>{value ? value : <span style={{color: 'red'}}>-</span>}</Cell>;\n                            })}\n                        </List>\n                    </Group>\n\n                    <Group title=\"Hash params\">\n                        <List>\n                            {Object.keys(hashParams).map((key) => {\n                                let value = hashParams[key];\n                                return <Cell description={key}>{value ? value : <span style={{color: 'red'}}>-</span>}</Cell>;\n                            })}\n                        </List>\n                    </Group>\n                </Panel>\n            </View>\n        );\n    }\n}\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.subscribe(({ detail: { type, data }}) => {\n\tif (type === 'VKWebAppUpdateConfig') {\n\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\tschemeAttribute.value = data.scheme ? data.scheme : 'bright_light';\n\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n        var status_bar_color = 'dark';\n        if (schemeAttribute.value == 'space_gray') status_bar_color = 'light';\n        bridge.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": status_bar_color});\n\t}\n});\n\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}